"use strict";
import * as tslib_1 from "tslib";
import * as XLSX from "xlsx";
import JsExcelTemplateBase from "./common";
function arrayBufferToString(data) {
    return String.fromCharCode.apply(String, tslib_1.__spread(new Uint8Array(data)));
}
function stringToArrayBuffer(s) {
    var arrayBuffer = new ArrayBuffer(s.length);
    var view = new Uint8Array(arrayBuffer);
    for (var i = 0; i < s.length; i++) {
        // tslint:disable-next-line:no-bitwise
        view[i] = s.charCodeAt(i) & 0xFF;
    }
    return arrayBuffer;
}
/**
 * @public
 */
var JsExcelTemplate = /** @class */ (function (_super) {
    tslib_1.__extends(JsExcelTemplate, _super);
    function JsExcelTemplate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JsExcelTemplate.fromArrayBuffer = function (arrayBuffer) {
        var ascii = btoa(arrayBufferToString(arrayBuffer));
        var workbook = XLSX.read(ascii, {
            type: "base64",
            cellNF: true,
            cellStyles: true,
            cellDates: true,
        });
        return new JsExcelTemplate(workbook);
    };
    JsExcelTemplate.prototype.toArrayBuffer = function (bookType) {
        return stringToArrayBuffer(XLSX.write(this.workbook, { bookType: bookType, type: "binary" }));
    };
    JsExcelTemplate.prototype.toBlob = function (bookType) {
        if (bookType === void 0) { bookType = "xlsx"; }
        var arrayBuffer = this.toArrayBuffer(bookType);
        return new Blob([arrayBuffer], { type: "application/octet-stream" });
    };
    return JsExcelTemplate;
}(JsExcelTemplateBase));
export default JsExcelTemplate;
